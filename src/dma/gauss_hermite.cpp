#include <occ/dma/gauss_hermite.h>

namespace occ::dma {

Vec gauss_hermite_points(int n) {
  Vec result = Vec::Zero(n);
  switch (n) {
  case 1:
    break;
  case 2:
    result << -0.70710678118654, 0.70710678118654;
    break;
  case 3:
    result << -1.22474487139159, 0.00000000000000, 1.22474487139159;
    break;
  case 4:
    result << -1.65068012388578, -0.52464762327529, 0.52464762327529,
        1.65068012388578;
    break;
  case 5:
    result << -2.02018287045608, -0.95857246461381, 0.00000000000000,
        0.95857246461381, 2.02018287045608;
    break;
  case 6:
    result << -2.35060497367449, -1.33584907401370, -0.43607741192761,
        0.43607741192761, 1.33584907401369, 2.35060497367449;
    break;
  case 7:
    result << -2.65196135683523, -1.67355162876747, -0.81628788285896,
        0.00000000000000, 0.81628788285896, 1.67355162876747, 2.65196135683523;
    break;
  case 8:
    result << -2.93063742025724, -1.98165675669584, -1.15719371244678,
        -0.38118699020732, 0.38118699020732, 1.15719371244678, 1.98165675669584,
        2.93063742025724;
    break;
  case 9:
    result << -3.19099320178152, -2.26658058453184, -1.46855328921666,
        -0.72355101875283, 0.00000000000000, 0.72355101875283, 1.46855328921666,
        2.26658058453184, 3.19099320178152;
    break;
  case 10:
    result << -3.43615911883773, -2.53273167423278, -1.75668364929988,
        -1.03661082978951, -0.34290132722370, 0.34290132722370,
        1.03661082978951, 1.75668364929988, 2.53273167423278, 3.43615911883773;
    break;
  case 11:
    result << -3.66847084655957, -2.78329009978165, -2.02594801582575,
        -1.32655708449493, -0.65680956688210, 0.00000000000000,
        0.65680956688209, 1.32655708449493, 2.02594801582575, 2.78329009978165,
        3.66847084655958;
    break;
  case 12:
    result << -3.88972489786977, -3.02063702512088, -2.27950708050106,
        -1.59768263515260, -0.94778839124016, -0.31424037625435,
        0.31424037625435, 0.94778839124016, 1.59768263515260, 2.27950708050105,
        3.02063702512088, 3.88972489786978;
    break;
  case 13:
    result << -4.10133759617864, -3.24660897837240, -2.51973568567823,
        -1.85310765160151, -1.22005503659075, -0.60576387917106,
        0.00000000000000, 0.60576387917105, 1.22005503659074, 1.85310765160151,
        2.51973568567823, 3.24660897837240, 4.10133759617863;
    break;
  case 14:
    result << -4.30444857047362, -3.46265693360226, -2.74847072498540,
        -2.09518325850771, -1.47668273114114, -0.87871378732939,
        -0.29174551067256, 0.29174551067256, 0.87871378732939, 1.47668273114114,
        2.09518325850771, 2.74847072498539, 3.46265693360226, 4.30444857047362;
    break;
  case 15:
    result << -4.49999070730939, -3.66995037340445, -2.96716692790559,
        -2.32573248617385, -1.71999257518649, -1.13611558521092,
        -0.56506958325557, 0.00000000000000, 0.56506958325557, 1.13611558521092,
        1.71999257518648, 2.32573248617385, 2.96716692790560, 3.66995037340444,
        4.49999070730938;
    break;
  case 16:
    result << -4.68873893930580, -3.86944790486012, -3.17699916197995,
        -2.54620215784747, -1.95178799091625, -1.38025853919888,
        -0.82295144914465, -0.27348104613815, 0.27348104613815,
        0.82295144914465, 1.38025853919888, 1.95178799091625, 2.54620215784747,
        3.17699916197995, 3.86944790486011, 4.68873893930581;
    break;
  case 17:
    result << -4.87134519367440, -4.06194667587546, -3.37893209114149,
        -2.75776291570388, -2.17350282666661, -1.61292431422123,
        -1.06764872574345, -0.53163300134265, 0.00000000000000,
        0.53163300134265, 1.06764872574345, 1.61292431422123, 2.17350282666661,
        2.75776291570388, 3.37893209114148, 4.06194667587546, 4.87134519367439;
    break;
  case 18:
    result << -5.04836400887446, -4.24811787356812, -3.57376906848625,
        -2.96137750553160, -2.38629908916668, -1.83553160426162,
        -1.30092085838962, -0.77668291926741, -0.25826775051909,
        0.25826775051909, 0.77668291926740, 1.30092085838961, 1.83553160426162,
        2.38629908916668, 2.96137750553159, 3.57376906848626, 4.24811787356811,
        5.04836400887446;
    break;
  case 19:
    result << -5.22027169053746, -4.42853280660377, -3.76218735196401,
        -3.15784881834759, -2.59113378979453, -2.04923170985061,
        -1.52417061939353, -1.01036838713431, -0.50352016342388,
        0.00000000000000, 0.50352016342388, 1.01036838713431, 1.52417061939353,
        2.04923170985061, 2.59113378979453, 3.15784881834760, 3.76218735196401,
        4.42853280660376, 5.22027169053747;
    break;
  case 20:
    result << -5.38748089001122, -4.60368244955073, -3.94476404011561,
        -3.34785456738321, -2.78880605842812, -2.25497400208927,
        -1.73853771211658, -1.23407621539532, -0.73747372854539,
        -0.24534070830090, 0.24534070830090, 0.73747372854539, 1.23407621539532,
        1.73853771211658, 2.25497400208927, 2.78880605842812, 3.34785456738320,
        3.94476404011561, 4.60368244955074, 5.38748089001122;
    break;
  default:
    throw std::runtime_error("n must be in [1, 20]");
  }
  return result;
}

Vec gauss_hermite_weights(int n) {

  Vec result = Vec::Zero(n);
  switch (n) {
  case 1:
    result << 1.77245385090552;
    break;
  case 2:
    result << 0.88622692545275, 0.88622692545275;
    break;
  case 3:
    result << 0.29540897515092, 1.18163590060368, 0.29540897515092;
    break;
  case 4:
    result << 0.08131283544724, 0.80491409000551, 0.80491409000551,
        0.08131283544724;
    break;
  case 5:
    result << 0.01995324205904, 0.39361932315224, 0.94530872048294,
        0.39361932315224, 0.01995324205904;
    break;
  case 6:
    result <<

        0.00453000990550,
        0.15706732032285, 0.72462959522439, 0.72462959522439, 0.15706732032285,
        0.00453000990550;
    break;
  case 7:
    result << 0.00097178124509, 0.05451558281912, 0.42560725261012,
        0.81026461755680, 0.42560725261012, 0.05451558281912, 0.00097178124509;
    break;
  case 8:
    result <<

        0.00019960407221,
        0.01707798300741, 0.20780232581489, 0.66114701255824, 0.66114701255824,
        0.20780232581489, 0.01707798300741, 0.00019960407221;
    break;
  case 9:
    result << 0.00003960697726, 0.00494362427553, 0.08847452739437,
        0.43265155900255, 0.72023521560605, 0.43265155900255, 0.08847452739437,
        0.00494362427553, 0.00003960697726;
    break;
  case 10:
    result << 0.00000764043285, 0.00134364574678, 0.03387439445548,
        0.24013861108231, 0.61086263373532, 0.61086263373532, 0.24013861108231,
        0.03387439445548, 0.00134364574678, 0.00000764043285;
    break;
  case 11:
    result << 0.00000143956039, 0.00034681946632, 0.01191139544491,
        0.11722787516770, 0.42935975235612, 0.65475928691459, 0.42935975235612,
        0.11722787516771, 0.01191139544491, 0.00034681946632, 0.00000143956039;

    break;
  case 12:
    result << 0.00000026585516, 0.00008573687043, 0.00390539058462,
        0.05160798561588, 0.26049231026416, 0.57013523626248, 0.57013523626248,
        0.26049231026416, 0.05160798561588, 0.00390539058462, 0.00008573687043,
        0.00000026585516;
    break;
  case 13:
    result << 0.00000004825731, 0.00002043036040, 0.00120745999271,
        0.02086277529617, 0.14032332068702, 0.42161629689854, 0.60439318792116,
        0.42161629689854, 0.14032332068702, 0.02086277529617, 0.00120745999271,
        0.00002043036040, 0.00000004825731;
    break;
  case 14:
    result << 0.00000000862859, 0.00000471648435, 0.00035509261355,
        0.00785005472645, 0.06850553422346, 0.27310560906424, 0.53640590971209,
        0.53640590971209, 0.27310560906425, 0.06850553422346, 0.00785005472645,
        0.00035509261355, 0.00000471648435, 0.00000000862859;
    break;
  case 15:
    result << 0.00000000152247, 0.00000105911554, 0.00010000444123,
        0.00277806884291, 0.03078003387254, 0.15848891579593, 0.41202868749889,
        0.56410030872641, 0.41202868749890, 0.15848891579593, 0.03078003387254,
        0.00277806884291, 0.00010000444123, 0.00000105911554, 0.00000000152247;
    break;
  case 16:
    result << 0.00000000026548, 0.00000023209808, 0.00002711860092,
        0.00093228400862, 0.01288031153551, 0.08381004139898, 0.28064745852853,
        0.50792947901661, 0.50792947901661, 0.28064745852853, 0.08381004139898,
        0.01288031153551, 0.00093228400862, 0.00002711860092, 0.00000023209808,
        0.00000000026548;
    break;
  case 17:
    result << 0.00000000004580, 0.00000004977078, 0.00000711228914,
        0.00029864328669, 0.00506734995762, 0.04092003414975, 0.17264829767009,
        0.40182646947041, 0.53091793762486, 0.40182646947041, 0.17264829767009,
        0.04092003414975, 0.00506734995762, 0.00029864328669, 0.00000711228914,
        0.00000004977078, 0.00000000004580;
    break;
  case 18:
    result << 0.00000000000782, 0.00000001046720, 0.00000181065448,
        0.00009181126867, 0.00188852263026, 0.01864004238754, 0.09730174764131,
        0.28480728566998, 0.48349569472545, 0.48349569472545, 0.28480728566998,
        0.09730174764131, 0.01864004238754, 0.00188852263026, 0.00009181126867,
        0.00000181065448, 0.00000001046720, 0.00000000000782;
    break;
  case 19:
    result << 0.00000000000132, 0.00000000216305, 0.00000044882431,
        0.00002720919776, 0.00067087752140, 0.00798886677772, 0.05081038690905,
        0.18363270130699, 0.39160898861303, 0.50297488827618, 0.39160898861303,
        0.18363270130699, 0.05081038690905, 0.00798886677772, 0.00067087752140,
        0.00002720919776, 0.00000044882431, 0.00000000216305, 0.00000000000132;
    break;
  case 20:
    result << 0.00000000000022, 0.00000000043993, 0.00000010860693,
        0.00000780255647, 0.00022833863601, 0.00324377334223, 0.02481052088746,
        0.10901720602002, 0.28667550536283, 0.46224366960061, 0.46224366960061,
        0.28667550536283, 0.10901720602002, 0.02481052088746, 0.00324377334223,
        0.00022833863601, 0.00000780255647, 0.00000010860693, 0.00000000043993,
        0.00000000000022;
    break;
  default:
    throw std::runtime_error("n must be in range [1, 20]");
  }
  return result;
}

} // namespace occ::dma
